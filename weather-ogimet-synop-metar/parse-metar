#!/usr/bin/perl
# ----------------------------------------------------------------------
# Wetterparser fuer METAR-Daten von OGIMET.COM und deren Auswertung durch 
# das Tool meta2fxml. zum Aufbau und Pflege der IFAOE-Wetterdatenbank
# (c) 2012/2013 IFAOE.DE durch A.Weidauer 
# ----------------------------------------------------------------------
# Kontakt weidauer@ifaoe.de oder alex.weidauer@huckfinn.de
# ----------------------------------------------------------------------
use Switch;
use metaf2xml::parser;
use Data::Dumper;
use List::Util qw(sum min max);

# ======================================================================
# Standardkonfigurationen 
# ======================================================================
$TOOL    = "parse-metar"; 
$VERSION = "(c) - XII/2012 IFAOE.DE VERSION 1.0"; 
$DEBUG   = 0;  $COMMENT="-- "; 
$FORMAT  = "PGSQL"; 
$TABLE   = "METAR_MSG";
$STOP    = 0;
# ======================================================================
# Aufrufkonventionen
# ======================================================================
$NUM_ARGS = @ARGV;

# Hilfe
die 
 "\nProgramm: $TOOL METAR-FILE FORMAT [DB.TABLE]\n\n".
 "Aufgabe: Erstellt eine SQL Datei aus einer SYNOP Datei ".
 "und gibt das Ergebnis auf der Konsole aus.\n\n".
 "Parameter:\n\n".
 "  SYNOP-CSV - SYNOP-Datei mit Notation: \n".
 "   10004,2011,01,01,00,00,AAXX 01001 10004 ...=\n".
 "   10004,2011,01,01,01,00,AAXX 01011 10004 ...=\n".
 "   ...\n\n".
 "  FORMAT - Ausgabeformat TEXT.FULL|TEXT.ATTR|PGSQL".
 "   DEBUG  - Volles Ausgabeformat Text Parser+Ergebnis\n".
 "   TEXT   - Ausgabeformat Text Ergebnis attributiert\n".
 "   PGSQL  - Ausgabeformat PostgreSQL\n\n".
 " [DB.TABLE|STOP] - Name der Datenbanktabelle oder Stoppen nach N ".
 "   Iterationen fuer die Modi DEBUG und TEXT \n\n"
 if $NUM_ARGS < 2;

# Parameter Eingabedatei setzen
$FILE_NAME = $ARGV[0];
die "ERROR:$TOOL> Unbekannte METAR-Datei:\n$FILE_NAME!\n" 
if ! -f $FILE_NAME;

# Parameter fuer das Format und ggf. Tabellenname setzten
$FORMAT = $ARGV[1]; 

switch ($FORMAT) {
	 case "DEBUG" { $COMMENT = "# ";  $DEBUG = 2;
	     $STOP = $ARGV[2] if defined($ARGV[2]);
	  }
	 case "TEXT"  { $COMMENT = "# ";  $DEBUG = 1; 
	     $STOP = $ARGV[2] if defined($ARGV[2]);
	 }
	 case "PGSQL" { $COMMENT = "-- "; $DEBUG = 0;
	   $TABLE = $ARGV[2] if defined($ARGV[2]);
	 }
	 else { die "Unbekanntes Ausgabeformat $FORMAT \n"; }
}	

# ======================================================================
# KONFIGURATION
# ======================================================================
# NACHRICHTENTYP 
$TYPE="SPECI"; 

# ITERATIONSTIEFE FUER WOLKEN UND WETTER Korrespondiert mit DB Feldern
$NUM_ITER=5;

# WINDRICHTUNGEN 16 teiliger  Kompass 
@COMP_16 = qw ( N NNO NO ONO O OSO SO SSO S SSW SW WSW W WNW NW NNW N );

$DLINE ="=============================================================";
$SLINE ="-------------------------------------------------------------";

# STANDARDISIERTE EINHEITEN
$UNIT_MPS="\'m/s\'";   $UNIT_SEC="\'s\'";  $UNIT_GRD="\'Grad\'";
$UNIT_PRES="\'hPa\'";  $UNIT_DIST="\'m\'"; $UNIT_PERC="\'%\'";
$UNIT_GRDC="\'C\'";

# DATENBANKFELDER 
%DESC = (
	cld_bs_dgh_0	=> "untere Wolkenhoehe der Schicht - Messfehler",
	cld_bs_val_0	=> "untere Wolkenhoehe der Schicht - Messwert",
	cld_ds_val_0	=> "Bedeckungsgrad der Schicht - Messwert",
	cld_ds_key_0	=> "Bedeckungsgrad der Schicht - Schluessel",
	cld_ds_unt_0	=> "Bedeckungsgrad der Schicht - Interpretation",

	cld_bs_dgh_1	=> "untere Wolkenhoehe der Schicht - Messfehler",
	cld_bs_val_1	=> "untere Wolkenhoehe der Schicht - Messwert",
	cld_ds_val_1	=> "Bedeckungsgrad der Schicht - Messwert",
	cld_ds_key_1	=> "Bedeckungsgrad der Schicht - Schluessel",
	cld_ds_unt_1	=> "Bedeckungsgrad der Schicht - Interpretation",

	cld_bs_dgh_2	=> "untere Wolkenhoehe der Schicht - Messfehler",
	cld_bs_val_2	=> "untere Wolkenhoehe der Schicht - Messwert",
	cld_ds_val_2	=> "Bedeckungsgrad der Schicht - Messwert",
	cld_ds_key_2	=> "Bedeckungsgrad der Schicht - Schluessel",
	cld_ds_unt_2	=> "Bedeckungsgrad der Schicht - Interpretation",

	cld_bs_dgh_3	=> "untere Wolkenhoehe der Schicht - Messfehler",
	cld_bs_val_3	=> "untere Wolkenhoehe der Schicht - Messwert",
	cld_ds_val_3	=> "Bedeckungsgrad der Schicht - Messwert",
	cld_ds_key_3	=> "Bedeckungsgrad der Schicht - Schluessel",
	cld_ds_unt_3	=> "Bedeckungsgrad der Schicht - Interpretation",

	cld_bs_dgh_4	=> "untere Wolkenhoehe der Schicht - Messfehler",
	cld_bs_val_4	=> "untere Wolkenhoehe der Schicht - Messwert",
	cld_ds_val_4	=> "Bedeckungsgrad der Schicht - Messwert",
	cld_ds_key_4	=> "Bedeckungsgrad der Schicht - Schluessel",
	cld_ds_unt_4	=> "Bedeckungsgrad der Schicht - Interpretation",
	
	cld_bs_dgh_5	=> "untere Wolkenhoehe der Schicht - Messfehler",
	cld_bs_val_5	=> "untere Wolkenhoehe der Schicht - Messwert",
	cld_ds_val_5	=> "Bedeckungsgrad der Schicht - Messwert",
	cld_ds_key_5	=> "Bedeckungsgrad der Schicht - Schluessel",
	cld_ds_unt_5	=> "Bedeckungsgrad der Schicht - Interpretation",

	cld_levels   	=> "Anzahl der Schichten",
	cld_bs_min	=> "untere Wolkenhoehe - oberstes Level",
	cld_bs_max	=> "untere Wolkenhoehe - unterstets Level",
	cld_bs_unt	=> "untere Wolkenhoehe - Einheit",
	cld_ds_sum	=> "Bedeckungsgrad - Summe aller Schichten",
	cld_ds_avg	=> "Bedeckungsgrad - Mittel aller Schichten",
	cld_bs_dgh_max	=> "untere Wolkenhoehe der Schicht - max. Messfehler",
	
	obs_ptc	        => "Name Wetterprotokoll",
	obs_site	    => "Beobachtungsort",
	obs_time	    => "Beobachtungszeit",
	obs_msg	        => "Meldungstyp",
	
	wth_dsc_0	    => "Wettererscheinung - Klartext",
	wth_key_0	    => "Wettererscheinung - Kode",
	wth_dsc_1	    => "Wettererscheinung - Klartext",
	wth_key_1	    => "Wettererscheinung - Kode",
	wth_dsc_2	    => "Wettererscheinung - Klartext",
	wth_key_2	    => "Wettererscheinung - Kode",
	wth_dsc_3	    => "Wettererscheinung - Klartext",
	wth_key_3	    => "Wettererscheinung - Kode",
	wth_dsc_4	    => "Wettererscheinung - Klartext",
	wth_key_4	    => "Wettererscheinung - Kode",
	wth_dsc_5	    => "Wettererscheinung - Klartext",
	wth_key_5	    => "Wettererscheinung - Kode",
	sfc_at_unt	    => "Lufttemperatur - Einheit",
	sfc_at_val	=>  "Lufttemperatur - Messwert",
	sfc_dp_unt	=>  "Taupunkt - Einheit",
	sfc_dp_val	=>  "Taupunkt - Messwert",
	sfc_p_unt	=>  "Luftdruck Stationsniveau - Einheit",
	sfc_p_val	=>  "Luftdruck Stationsniveau - Messwert",
	sfc_rh_unt	=>  "relative Luftfeuchte - Einheit",
	sfc_rh_val	=>  "relative Luftfeuchte - Messwert",
	sfc_wd_dneg	=>  "Windrichtung - Abweichung neativ",
	sfc_wd_dpos	=>  "Windrichtung - Abweichung positiv",
	sfc_wd_from	=>  "Windrichtung - Ansprache aus",
	sfc_wd_unt	=>  "Windrichtung - Einheit",
	sfc_wd_val	=>  "Windrichtung - Wert",
	sfc_ws_unt	=>  "Windmessungsintervall - Einheit",
	sfc_ws_val	=>  "Windmessungsintervall - Messwert",
	sfc_wv_unt	=>  "Windgeschwindigkeit - Einheit",
	sfc_wv_val	=>  "Windgeschwindigkeit - Messwert",
	pv_vs_ddist	    =>  "Sicht - Messfehler",
	pv_vs_unt	    =>  "Sicht - Einheit",
	pv_vs_untx	    =>  "Sichtmodifikator - Schluessel",
	pv_vs_val	    =>   "Sicht - Messwert",
	pv_vs_valx	    =>  "Sichtmodifikator - Text"
);

# ----------------------------------------------------------------------
%WDESC = (
 "VL" => "sehr schwach",
 "LG" => "schwach",
 "HV" => "stark",
 "VC" => "in der Naehe",
 "RE" => "kuerzlich",
 "MI" => "flach",
 "PR" => "stellenweise",
 "BC" => "einzelne Schwaden",
 "DR" => "fegend",
 "BL" => "treibend",
 "SH" => "Schauer",
 "TS" => "Gewitter",
 "FZ" => "gefrierend",
 "DZ" => "Spruehregen",
 "RA" => "Regen",
 "SN" => "Schnee",
 "SG" => "Schneegriesel",
 "IC" => "Eisnadeln",
 "PL" => "Eiskoerper",
 "GR" => "Hagel",
 "GS" => "Graupel",
 "UP" => "Sonstige",
 "PO" => "Staub- und Sandwirbel",
 "SQ" => "Boeen",
 "FC" => "Windhose",
 "SS" => "Sandsturm",
 "DS" => "Staubsturm",
 "BR" => "feuchter Dunst",
 "FG" => "Nebel",
 "FU" => "Rauch",
 "VA" => "Vulkanasche",
 "DU" => "verbreitet Staub",
 "SA" => "Sand",
 "HZ" => "trockener Dunst",
 "PY" => "Spruehnebel",
);
%DEBUG_TXT =( 0 => "AUS", 1 => "TEILWEISE", 2 => "VOLL");

# ====================================================================
# Programm MAIN
# ====================================================================
%report  = (); %collect = (); $line = 0;
parse_file($FILE_NAME);

# ====================================================================
# Service Funktionen
# ====================================================================
sub parse_file {
  $file = $FILE_NAME;
  $table= $TABLE;
  $date_begin=`date \'+%Y-%m-%d %H:%M:%S\'`;
  print $COMMENT.$DLINE."\n";
  print $COMMENT."$TOOL $VERSION\n";
  print $COMMENT.$DLINE."\n";
  print $COMMENT, "METAR: \t", $FILE_NAME, "\n";
  print $COMMENT, "FORMAT:\t", $FORMAT, "\n";
  print $COMMENT, "TABLE: \t", $TABLE, "\n";
  print $COMMENT, "DEBUG: \t", $DEBUG_TXT{$DEBUG}, "\n\n";
  
  open ( FIN,  "<$file" ) || die "Unkown file $file \n"; 
  while (<FIN>) {
          $cnt=0;  $line++;
          next if /NIL=$/;
          last if ($STOP > 0) && ($line >= $STOP);
          
          ($site, $year, $month, $day, $hour, $min, $message) = split(",",$_);
          chomp($message);
          next if length($message) < 12;
          print "\n".$COMMENT.$SLINE."\n" if $DEBUG;
          print $COMMENT.$line.": ".$message, "\n" if $DEBUG;
          print $COMMENT.$SLINE."\n" if $DEBUG;
          translate_message($message, $TYPE, $year, $month, $day);
  }
  close(FIN);
  $date_end=`date \'+%Y-%m-%d %H:%M:%S\'`;
  print $COMMENT.$DLINE."\n";
  print $COMMENT."ENDE $TOOL  $date_end\n";
  print $COMMENT.$DLINE."\n";
}

# ----------------------------------------------------------------------
sub translate_message {
	local $m = $_[0]; 
	local $t = $_[1]; 
	local $Y = $_[2]; 
	local $M = $_[3];  
	local $D = $_[4];
	
	%report  = ();
	%collect = ();
    %report  = metaf2xml::parser::parse_report($m,$t);
	print_report(\%report) if $DEBUG == 2 ;
    print $COMMENT.$SLINE."\n" if $DEBUG == 2;
	chomp($m);
	$collect{obs_code}="\'".$m."\'";
	mtr_get_station();
	msg_get_time($Y, $M, $D);
	local $err = $report{ERROR};
	if ( defined($err) ) {
	  $collect{error} = "TRUE";
	} else {
      $collect{error} = "FALSE";
	  mtr_get_vis();
	  mtr_get_temp();
	  mtr_get_sfc_wind();
	  mtr_get_qnh();
	  mtr_get_cloud();
	  mtr_get_weather();
    }
    switch ($FORMAT) {
	  case "DEBUG" {
		foreach $key (sort keys %collect) {
			$value = $collect{$key};
			$name = $DESC{$key};
			 print sprintf("%14s %22s  %s\n",$key, $value, $name);
		} 
	  }
	  case "TEXT" {
		foreach $key (sort keys %collect) {
			$value = $collect{$key};
			 print sprintf("%14s %s\n",$key, $value);
		}	 
      }		  
	  case "PGSQL" {
		print "INSERT INTO\n$table"; 
		local @keys = sort keys %collect;
		local @vals = (); 
		local $vcnt=0;
		foreach $key (@keys) {
			$vals[$vcnt++] = $collect{$key};
	    }	
		print "(".join(",",@keys).")\n";
		print "VALUES (".join(",",@vals).");\n\n";
      }		  
    }
}
# ---------------------------------------------------------------------
sub mtr_get_station {
	local $data = $report{obsStationId}{id};
    $collect{obs_site}  = "\'".$data."\'";
    $collect{obs_ptc}   = "\'METAR\'";
    $collect{obs_msg}  = "\'".$TYPE."\'";
}
# ---------------------------------------------------------------------
sub mtr_get_vis {
	local ($data, $datas, $unit, $units, $ddst, $limit) = (
	  get_val($report{visPrev}{distance}{v},"NULL"),
	  get_val($report{visPrev}{distance}{v},"NULL"),
	  get_val($report{visPrev}{distance}{u},"M"),
	  get_val($report{visPrev}{distance}{u},"M"),
	  get_val($report{visPrev}{distance}{rp},"NULL"),
	  get_val($report{visPrev}{distance}{q},"NULL")
	);
	local ($data,  $unit) = unit_cv($data, $unit);
	local ($datas, $units) = unit_cv($datas, $units);
	local ($datas, $limit) = unit_cv($datas, $limit);
    $collect{pv_vs_val}  = $data;
    $collect{pv_vs_unt}  = $unit;
    $collect{pv_vs_ddist}  = $ddst;
    
    $collect{pv_vs_valx}  = "\'".$datas."\'" if !$data eq "NULL";
    $collect{pv_vs_untx}  = $limit if !$limit eq "NULL";
 }

# ---------------------------------------------------------------------
sub mtr_get_temp {
	local ($nrh, $data) = ( 0, 0);

    for $try (1..10) {
	 local ($rh, $unit) = (
	   get_val($report{temperature}{relHumid.$try}{v},"NULL"),"%");
	   if ($rh eq "NULL") {
		   last;
       } else {
   	      ($nrh, $data) = ($nrh += 1, $data += $rh) 
	   }	   
    } 
    if ($nrh > 0) {
      $collect{sfc_rh_val}  = sprintf("%2.0f",$data /= $nrh);
      $collect{sfc_rh_unt}  = "\'%\'";
    }  else {
      $collect{sfc_rh_val}  = "NULL" ;
      $collect{sfc_rh_unt}  = "NULL";
	}
    local ($data, $unit) = (
	   get_val($report{temperature}{air}{temp}{v},"NULL"),
	   get_val($report{temperature}{air}{temp}{u},"C"));
	# print Dumper($data, $unit);
	local ($data, $unit) = unit_cv($data, $unit);
    $collect{sfc_at_val}  = sprintf("%2.0f",$data);
    $collect{sfc_at_unt}  = $unit;
    local ($data, $unit) = (
	   get_val($report{temperature}{dewpoint}{temp}{v},"NULL"),
	   get_val($report{temperature}{dewpoint}{temp}{u},"C"));
	local ($data, $unit) = unit_cv($data, $unit);
    $collect{sfc_dp_val}  = sprintf("%2.0f",$data);
    $collect{sfc_dp_unt}  = $unit;
}

# ---------------------------------------------------------------------
sub mtr_get_weather {
	local $num_wth=0;
	for $try (0..$NUM_ITER) {
    	local @col = ();
		local $wth = $report{weather}[$try];
		last if ! defined($wth);
		$num_wth++;

        local $desc = $wth->{s};
        $desc =~ s/^\-\-/VL/; $desc =~ s/^\-/LG/; $desc =~ s/^\+/HV/;
        local $slen = length($desc)-1;
        
        for $l (0..$slen/2) {
			local $key = substr($desc, $l*2,2);
			# print $desc, ": ", $key, " \n";
			$col[$l] = $WDESC{$key};
		}
		$collect{sprintf("wth_key_%s",$try)}  = "\'".$desc."\'";
		$collect{sprintf("wth_dsc_%s",$try)} =  "\'".join(" ",@col)."\'";
    }	
	$collect{wth_num} = $num_wth;
}

# ---------------------------------------------------------------------
sub mtr_get_cloud {
	local $num_cld=0;
	local (@cdk, @cdu, @cdv, @cbv, @cbu,@cbr) = ( (),(),(),(),(),() );
	for $try (0..$NUM_ITER) {
		local $cloud = $report{cloud}[$try];
		last if ! defined($cloud);
		$num_cld++;
		
        # Cloud cover 
		($cdv[$try], $cdu[$try], $cdk[$try])  = (
		  $cloud->{cloudCover}{v}, 
		  "CLOUD.".$cloud->{cloudCover}{v},
		  $cloud->{cloudCover}{v}
		);
		($cdv[$try], $cdu[$try]) = unit_cv($cdv[$try], $cdu[$try]);

        # Cloud levels
		($cbv[$try], $cbu[$try], $cbr[$try]) = (
		  get_val($cloud->{cloudBase}{v},"NULL"),
		  get_val($cloud->{cloudBase}{u},"NULL"),
		  get_val($cloud->{cloudBase}{rp},"NULL"),
		);
		($cbv[$try], $cbu[$try]) = unit_cv($cbv[$try], $cbu[$try]);
       local $cdnum = @cdv;
       $collect{sprintf("cld_ds_val_%s" ,$try)} = $cdv[$try];
       $collect{sprintf("cld_ds_unt_%s", $try)} = "\'".$cdu[$try]."\'";
       $collect{sprintf("cld_ds_key_%s" ,$try)} = "\'".$cdk[$try]."\'";
       $collect{sprintf("cld_bs_dgh_%s" ,$try)} = $cbr[$try] ;
       $collect{sprintf("cld_bs_val_%s", $try)} = $cbv[$try] ;
		
		
    }
    local $cdnum = @cdv;
    if ($cdnum>0) {
		local $sum  = sum(@cdv);  $sum = 8 if $sum > 8;
		local $avg  = sum(@cdv)/@cdv;
		local $val   = join (" ", @cdv);
		local $key   = join (" ", @cdk);
		local $unit  = join (" ", @cdu);
		$collect{cld_level}   = $num_cld;
		$collect{cld_ds_sum}  = $sum;
		$collect{cld_ds_avg}  = sprintf("%2.1f",$avg);
	}	
    local $cbnum = @cbv;
    if ($cdnum>0) {
		local $high  = max ( @cbv);
		local $low   = min ( @cbv);
		local $delta = max ( @cbr);
		local $prt   = join (" ", @cbv);
		$collect{cld_bs_min}  = $high;
		$collect{cld_bs_max}  = $low;
		$collect{cld_bs_unt}  = $cbu[0];
		$collect{cld_bs_dgh_max} = $delta;
	}	
    
}
# ---------------------------------------------------------------------
sub mtr_get_qnh {
	local @qnh = $report{QNH}[0];
	local $num = $#qnh;
	return if $num <0;
	# print Dumper(@qnh,$num);
	local ($data, $unit) = (
	  get_val($qnh[0]{pressure}{v},"NULL"),
	  get_val($qnh[0]{pressure}{u},"hPa"),
	);
	local ($data, $unit) = unit_cv($data, $unit);
    $collect{sfc_p_val} = sprintf("%2.1f",$data);
    $collect{sfc_p_unt} = $unit;
}

# ---------------------------------------------------------------------
sub mtr_get_sfc_wind {
	local ($data, $unit) = (
	  get_val($report{sfcWind}{wind}{speed}{v},"NULL"),
	  get_val($report{sfcWind}{wind}{speed}{u},"KT")
	);
	local ($data, $unit) = unit_cv($data, $unit);
	$collect{sfc_wv_val}  = $data;
	$collect{sfc_wv_unt}  = $unit;
	local ($data, $unit) = (
	  get_val($report{sfcWind}{wind}{dir}{v},"NULL"), "GRAD");  
	local ($data, $unit) = unit_cv($data, $unit);
	$collect{sfc_wd_val}   = $data;
	$collect{sfc_wd_unt}  = $unit;
	if ($data eq "NULL") {
	  $collect{sfc_wd_from}  = "NULL";
	} else {
	  $collect{sfc_wd_from}  = "\'".$COMP_16[int($data / 22.5)]."\'";
    }
    $collect{sfc_wd_dneg} = get_val($report{sfcWind}{wind}{dir}{rn},"NULL");  
    $collect{sfc_wd_dpos} = get_val($report{sfcWind}{wind}{dir}{rp},"NULL");  
    local ($data, $unit) =  (
      get_val($report{sfcWind}{measurePeriod}{v},"NULL"),
      get_val($report{sfcWind}{measurePeriod}{u},"NULL")
    );  
	local ($data, $unit) = unit_cv($data, $unit);
    $collect{sfc_ws_val}  = $data;
    $collect{sfc_ws_unt} = $unit;
}	

# ---------------------------------------------------------------------
sub unit_cv {
  local $data = $_[0];
  local $unit = $_[1];
  
  $unit = 'NULL' if $data eq 'NULL';
  
  switch ($unit) {
	  case "NULL" {  $data  = "NULL"; }
	  case "MPS"  {  $data /= 1.0;   $unit = $UNIT_MPS; }
	  case "KMH"  {  $data /= 3.6;   $unit = $UNIT_MPS; }
	  case "KT"   {  $data *= 0.514; $unit = $UNIT_MPS; }
	  case "GRAD" {  $data *= 1.0;   $unit = $UNIT_GRD; }
	  
	  case "SEC"  {  $data *= 1.0;   $unit = $UNIT_SEC; }
	  case "MIN"  {  $data *= 60.0;   $unit = $UNIT_SEC; }

	  case "hPa"  {  $data *= 1.0;   $unit = $UNIT_PRES; }
	  case "mmHg" {  $data *= 133.3/100.0; 
	                 $unit = $UNIT_PRES; }
	  case "inHg" {  $data *= 3386.389/100.0; 
	                 $unit = $UNIT_PRES; }

	  case "m"    {  $data *= 1.0;   $unit = $UNIT_DIST; }
	  case "M"    {  $data *= 1.0;   $unit = $UNIT_DIST; }
	  case "FT"   {  $data *= 0.3048;   $unit = $UNIT_DIST; }
	  case "KM"   {  $data *= 1000.0;   $unit = $UNIT_DIST; }
	  case "SM"   {  $data *= 1852.0;   $unit = $UNIT_DIST; }
	  
	  case "%"    {  $data *= 1.0;   $unit = $UNIT_PERC; }
	  case "C"    {  $data *= 1.0;   $unit = $UNIT_GRDC; }
	  case "F"    {  $data = ($data-32)*5.0/9.0; $unit = $UNIT_GRDC; }
	                 
	  case "isGreater"      { $data = "> ".$data; $unit = "\'LIM.GT\'"; }
	  case "isEqualGreater" { $data = "> ".$data; $unit = "\'LIM.GE\'"; }
	  case "isLess"         { $data = "< ".$data; $unit = "\'LIM.LT\'"; }
	                 
	  case "CLOUD."      {  $data = "NULL";   $unit = "NULL"; }
	  case "CLOUD.CAVOK" {  $data = 0;   $unit = "F.0"; }
	  case "CLOUD.CLR"   {  $data = 0;   $unit = "F.0"; }
	  case "CLOUD.SKC"   {  $data = 0;   $unit = "F.0"; }
	  case "CLOUD.NSC"   {  $data = 0.5; $unit = "F.0-1"; }
	  case "CLOUD.FEW"   {  $data = 1.5; $unit = "F.1-2"; }
	  case "CLOUD.SCT"   {  $data = 3.5; $unit = "F.3-4"; }
	  case "CLOUD.BKN"   {  $data = 6;   $unit = "F.5-7"; }
	  case "CLOUD.OVC"   {  $data = 8;   $unit = "F.8"; }
	  
	  else { die "Unkown unit $unit at $file> $line: $msg \n";}
  }
  return ($data, $unit);
}

# ---------------------------------------------------------------------
sub get_val {
	local $dta = $_[0];
	local $def = $_[1];
	local $n = ( $dta eq ""); 
	local $e = ( $dta =~ /\s+/ ); 
	# print "X=$dta:$def:$n:$u:$e\n"; 
	return $def if $e;
	return $def if $n;
	return $dta;
}

# ---------------------------------------------------------------------
sub msg_get_time {
	local  $dt = join('-',@_);
	local  @tm =
	 ( $report{obsTime}{timeAt}{hour},
	   $report{obsTime}{timeAt}{minute}, "00" );
	   $tm[1] = "00" if ! $tm[1];
	$tm = join (':', @tm);
	$collect{obs_time} = "\'".$dt." ".$tm."\'";
}

# ---------------------------------------------------------------------
sub print_report {

	local $data = shift;
	while (($key, $value) = each(@$data)){
		 local $t=ref($value);
		 print "/".$key;
		 if ($t eq "HASH") {
			 $cnt++;
			 print ".H".$cnt;
			 print_report($value);
			 $cnt--;
		 } elsif ($t eq "ARRAY") {
			 $cnt++;
			 print ".A".$cnt;
			 print_report($value);
			 $cnt--;
		 } elsif ($t eq "") {
			print "=$value;";
		 }
		 if ($cnt==0) { print "\n"; }
	}
}

# ======================================================================
# TESTNACHRICHTEN
# ======================================================================
@TEST_MSGS = (
 "METAR EGAA 210420Z 25014KT 9999 SCT016 05/03 Q1001",
 "METAR EDDH 012250Z 19011G22KT 9999 -RA FEW006 BKN015 07/05 Q1004 RERA BECMG 4000 BKN008",
 "METAR EDDM 011150Z 26009KT 7000 -SHRA FEW008 BKN016 BKN021 04/03 Q1025 TEMPO BKN014",
 "METAR EDDR 010950Z 22007KT 1200 R27/P1500N BR SCT001 BKN002 05/05 Q1027 BECMG 1500 BR BKN004",
 "METAR EDDH 010020Z 31004KT 4000 R23/1400VP1500U R15/P1500N BR SCT003 BKN040 05/04 Q1020 BECMG 6000 NSW",
 "SPECI ETAR 012036Z 24008KT 5000 -DZ BR FEW007 BKN012 OVC030 08/04 A3014 RMK GRN WR//=",
 "METAR ETUO 012250Z AUTO 28007KT 9999 // FEW038/// BKN050/// 01/M00 Q1020="
);


# --- EOF -------------------------------------------------------------
